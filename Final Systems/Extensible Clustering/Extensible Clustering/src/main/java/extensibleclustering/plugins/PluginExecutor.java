package extensibleclustering.plugins;

import extensibleclustering.dependencies.Position;
import java.io.File;
import java.lang.reflect.Method;
import java.nio.file.Path;
import javafx.scene.Scene;

public class PluginExecutor {
  
  /**
   * Executes a parser plug-in with the specified file and parser.
   * @param file - The file to parse.
   * @param parser - The parser to use to parse the file.
   * @return Position[] - The Positions parsed from the file.
   * @exception Exception - May be thrown by the parse file method. Type unknown.
   */
  public Position[] execParser(File file, Class<?> parser) throws Exception {
    Position[] returnedPositions = null;
    Object instance = parser.newInstance();
    Method parseFile = parser.getDeclaredMethod("parseFile", File.class);
    Object result = parseFile.invoke(instance, file);
    returnedPositions = Position[].class.cast(result);
    return returnedPositions;
  }
  
  /**
   * Executes the specified clustering algorithm and returns the file it was output to.
   * @param data - The data to perform clustering on.
   * @param fileName - The name of the file being clustered so it can be used in the output.
   * @param clusteringAlgorithm - The clustering algorithm class to use.
   * @return File - The file the result of the clustering was output to.
   * @throws Exception - May be thrown from the Clustering Algorithm.
   */
  public Path execClustering(Position[] data, String fileName, Class<?> clusteringAlgorithm) 
      throws Exception {
    Path returnedPath = null;
    Object instance = clusteringAlgorithm.newInstance();
    Method clusterData = clusteringAlgorithm.getDeclaredMethod("clusterData", 
        Position[].class, String.class);
    Method lastOutputFile = clusteringAlgorithm.getDeclaredMethod("getLastOutputFile");
    clusterData.invoke(instance, data, fileName);
    Object result = lastOutputFile.invoke(instance);
    returnedPath = Path.class.cast(result);
    return returnedPath;
  }
  
  /**
   * Executes the specified visualisation method, visualising the output file given.
   * @param outputFile - The output file to visualise.
   * @param visualisationMethod - The visualisation method to use.
   * @return - Scene - Scene generated by the visualisation method.
   * @throws Exception - May be thrown by the visualisation method.
   */
  public Scene execVisualisation(Path outputFile, Class<?> visualisationMethod) throws Exception {
    Scene returnedScene = null;
    Object instance = visualisationMethod.newInstance();
    Method visualiseData = visualisationMethod.getDeclaredMethod("visualiseData", Path.class);
    Object result = visualiseData.invoke(instance, outputFile);
    returnedScene = Scene.class.cast(result);    
    return returnedScene;
  }

}
